rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated and admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user's email is verified (extra security layer)
    function isVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    // Helper function to prevent rapid writes (rate limiting)
    function notTooFrequent(lastWrite) {
      return lastWrite == null || request.time > lastWrite + duration.value(1, 's');
    }
    
    // Helper function to validate data size (prevent large payloads)
    function isValidSize() {
      return request.resource.size() < 1000000; // 1MB limit
    }
    
    // Classes - public can read, only admins can write with rate limiting
    match /classes/{classId} {
      allow read: if true;
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() && 
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Coaches - public can read, only admins can write with rate limiting
    match /coaches/{coachId} {
      allow read: if true;
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() &&
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Features - public can read, only admins can write with rate limiting
    match /features/{featureId} {
      allow read: if true;
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() &&
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Pricing - public can read, only admins can write with rate limiting
    match /pricing/{pricingId} {
      allow read: if true;
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() &&
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Testimonials - public can read, only admins can write with rate limiting
    match /testimonials/{testimonialId} {
      allow read: if true;
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() &&
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Payments/Members - authenticated users can create (with rate limit), only admins can read/update
    match /payments/{paymentId} {
      allow create: if request.auth != null && isValidSize();
      allow read, update, delete: if isAdmin();
    }
    
    // Media Library - only admins can manage media metadata with rate limiting
    match /media/{mediaId} {
      allow read: if isAdmin();
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() &&
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Site Content (Hero, etc) - public can read, only admins can write with rate limiting
    match /siteContent/{contentId} {
      allow read: if true;
      allow create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && isValidSize() &&
                       notTooFrequent(resource.data.get('lastModified', null));
      allow delete: if isAdmin();
    }
    
    // Users - only accessible to the user themselves or admins
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow write: if (request.auth.uid == userId || isAdmin()) && isValidSize();
    }
    
    // Login Attempts Tracking (for server-side rate limiting)
    match /loginAttempts/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
  }
}
